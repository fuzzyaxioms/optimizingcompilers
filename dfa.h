// Dataflow engine
#ifndef DFA_H
#define DFA_H

#include <vector>

#include "common.h"
#include "bitvecset.h"
#include "cfg.h"

// Assume properties are bit sets.
// Property sets per basic block.
typedef std::vector<BitVecSet> PropArray;
typedef PropArray::iterator PropIt;

// Alternative representation of the blocks.
typedef std::vector<BlockIt> BlockItArray;
typedef BlockItArray::iterator BlockItArrayIt;

enum MeetOperator {
	ANY_PATH,
	ALL_PATH
};

enum DataDirection {
	FORWARDS,
	BACKWARDS
};

class DFA {
private:
	CFG &cfg;
	BlockItArray block_array;
	
	// Initialize the in and out sets.
	void initialize_inout(ulong num_blocks, ulong num_props);
	
	// Get fast random access to the blocks.
	void gen_links();
	
	// Get the previous/next blocks in data flow direction.
	void get_near(ulong ix, std::vector<ulong> &prevs, std::vector<ulong> &nexts);
	
	// Helper for the meet operator
	void meet_with(BitVecSet &a, BitVecSet &b);
	
public:
	MeetOperator meet_op;
	DataDirection data_dir;
	
	// in and out are in pred and succ order, not in data flow direction
	PropArray in_sets;
	PropArray out_sets;
	
	DFA(MeetOperator meet_op_, DataDirection data_dir_, CFG &cfg_);
	
	// The gen sets and kill sets are generated by the specific analysis.
	// Needs basic blocks to be numbered.
	void solve(ulong num_props, PropArray &gen_sets, PropArray &kill_sets);
};

#endif /* DFA_H */
